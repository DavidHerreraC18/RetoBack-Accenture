package com.payment.api.model.clientorder;

import java.time.LocalDateTime;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.payment.api.model.product.OrderProduct;
import com.payment.api.model.userclient.UserClient;

/**
 * Represents an Order that a user has created or currently is in process
 */
@Getter
@Setter
@Entity
@NoArgsConstructor
@Table(name = "client_order")
public class ClientOrder {

	/**
	 * Represents de percentage of the Iva.
	 */
	@Transient
	@JsonIgnore
	private final double ivaP = 0.19;

	/**
     * Represents the unique identification of the ClientOrder.
     */
    @Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "id")
	private Long id;

	/**
     * Represents the multiple products with specific quantities that an Order can hava
     */
	@OneToMany(mappedBy = "clientOrder")
	private List<OrderProduct> orderProducts;

	/**
     * Represents the generation date of the order.
     */
	@Column(name = "generation_date")
	private LocalDateTime generationDate;

	/**
     * Represents the delivery cost of the order.
     */
	@Column(name = "delivery_cost")
	private Long deliveryCost;

	/**
     * Represents the total cost of the order, generated by the list of 
	 * order products.
     */
	@Column(name = "total_cost")
	private Long totalCost;

	/**
     * Represents the state of the order.
	 * The state can be Completed, In-Process, Cancelled
     */
	@Column(name = "state")
	private String state;

	/**
     * Represents user that created the order
     */
	@ManyToOne(fetch = FetchType.EAGER)
    @JsonIgnore
    private UserClient userClient;

	/**
     * Function that updates the total cost of the order
	 * @param withIva boolean Represents the adding of iva to the total cost
     */
	public void updateTotalCost(boolean withiva){
		long totalCost = 0;
		for(OrderProduct orderProduct : this.orderProducts)
		{
			totalCost += orderProduct.getCost();
		}
		long iva = 0;
		if(withiva)
			iva = (long) (totalCost*ivaP);
		if(totalCost > 100000){
			this.deliveryCost = Long.valueOf(0);
		}
		this.totalCost = totalCost+deliveryCost+iva;
	}

	
}
